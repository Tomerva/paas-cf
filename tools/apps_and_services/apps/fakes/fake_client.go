// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-cf/tools/apps_and_services/apps"
	cfclient "github.com/cloudfoundry-community/go-cfclient"
)

type FakeClient struct {
	ListAppsStub        func() ([]cfclient.App, error)
	listAppsMutex       sync.RWMutex
	listAppsArgsForCall []struct {
	}
	listAppsReturns struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	SummaryStub        func() (cfclient.AppSummary, error)
	summaryMutex       sync.RWMutex
	summaryArgsForCall []struct {
	}
	summaryReturns struct {
		result1 cfclient.AppSummary
		result2 error
	}
	summaryReturnsOnCall map[int]struct {
		result1 cfclient.AppSummary
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) ListApps() ([]cfclient.App, error) {
	fake.listAppsMutex.Lock()
	ret, specificReturn := fake.listAppsReturnsOnCall[len(fake.listAppsArgsForCall)]
	fake.listAppsArgsForCall = append(fake.listAppsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListApps", []interface{}{})
	fake.listAppsMutex.Unlock()
	if fake.ListAppsStub != nil {
		return fake.ListAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListAppsCallCount() int {
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	return len(fake.listAppsArgsForCall)
}

func (fake *FakeClient) ListAppsCalls(stub func() ([]cfclient.App, error)) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = stub
}

func (fake *FakeClient) ListAppsReturns(result1 []cfclient.App, result2 error) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = nil
	fake.listAppsReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListAppsReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = nil
	if fake.listAppsReturnsOnCall == nil {
		fake.listAppsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Summary() (cfclient.AppSummary, error) {
	fake.summaryMutex.Lock()
	ret, specificReturn := fake.summaryReturnsOnCall[len(fake.summaryArgsForCall)]
	fake.summaryArgsForCall = append(fake.summaryArgsForCall, struct {
	}{})
	fake.recordInvocation("Summary", []interface{}{})
	fake.summaryMutex.Unlock()
	if fake.SummaryStub != nil {
		return fake.SummaryStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.summaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) SummaryCallCount() int {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return len(fake.summaryArgsForCall)
}

func (fake *FakeClient) SummaryCalls(stub func() (cfclient.AppSummary, error)) {
	fake.summaryMutex.Lock()
	defer fake.summaryMutex.Unlock()
	fake.SummaryStub = stub
}

func (fake *FakeClient) SummaryReturns(result1 cfclient.AppSummary, result2 error) {
	fake.summaryMutex.Lock()
	defer fake.summaryMutex.Unlock()
	fake.SummaryStub = nil
	fake.summaryReturns = struct {
		result1 cfclient.AppSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) SummaryReturnsOnCall(i int, result1 cfclient.AppSummary, result2 error) {
	fake.summaryMutex.Lock()
	defer fake.summaryMutex.Unlock()
	fake.SummaryStub = nil
	if fake.summaryReturnsOnCall == nil {
		fake.summaryReturnsOnCall = make(map[int]struct {
			result1 cfclient.AppSummary
			result2 error
		})
	}
	fake.summaryReturnsOnCall[i] = struct {
		result1 cfclient.AppSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apps.Client = new(FakeClient)
